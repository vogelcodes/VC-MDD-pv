---
import ReactPhoneInput from "./react-phone";
import { formatPhoneNumber } from "react-phone-number-input";
import { sendToMeta } from "../utils/metaConversionsAPI";
import { encryptData, decryptData } from "../utils/crypto";
import type { LocationInfo } from "../types/locationInfo";

export interface Props {
  pcId?: string;
  clientID?: string;
}

const { pcId = "", clientID = "" } = Astro.props;

// Get query params
const search = Astro.url.searchParams;
const path = Astro.url.pathname;

// Get user IP
const userIp = Astro.clientAddress;

// Attempt to get location info from middleware
const locationData = Astro.locals.locationInfo;

const fbc = Astro.cookies.get("_fbc")?.value;
const fbp = Astro.cookies.get("_fbp")?.value;

const formAction = `/forms/leads-astro`;

const encryptedLocation = locationData
  ? encryptData(JSON.stringify(locationData))
  : "";

type LocationInfo = {
  country_code: string;
  status: string;
  country: string;
  region_code: string;
  region: string;
  city: string;
  isp: string;
  zip_code: string;
  time_zone: string;
  latitude: number;
  longitude: number;
};

//time how long it takes to get location info
console.time("location");
const ipResponse = await fetch("http://ip-api.com/json/" + userIp);
let locationInfo: LocationInfo = await ipResponse.json();

console.timeEnd("location");

console.log(locationInfo);
if (locationInfo.status === "fail") {
  const locationMock = {
    status: "success",
    country: "United States",
    countryCode: "US",
    region: "CA",
    regionName: "California",
    city: "Los Angeles",
    zip: "90038",
    lat: 33.9533,
    lon: -43.1883,
    timezone: "America/Sao_Paulo",
    isp: "Mock ISP (Dev Mode)", // Indicate mock
    org: "Mock Org (Dev Mode)",
    as: "Mock AS (Dev Mode)",
  };
  locationInfo.city = locationMock.city;
  locationInfo.region = locationMock.region;
  locationInfo.country = locationMock.country;
  locationInfo.country_code = locationMock.countryCode;
}
---

<div id="container" class="bg-green">
  <script>
    //get posthog cookie from browser
    let posthog = document.cookie
      .split("; ")
      .find((row) => row.startsWith("ph_phc"))
      ?.split("=")[1];
    //posthog tracking cookie is not set yet, so lets wait and check again
    while (!posthog) {
      setTimeout(() => {
        posthog = document.cookie
          .split("; ")
          .find((row) => row.startsWith("ph_phc"))
          ?.split("=")[1];
      }, 1000);
    }
    let phSessionId;
    if (posthog) {
      try {
        const decodedPosthog = decodeURIComponent(posthog);
        const posthogData = JSON.parse(decodedPosthog);
        phSessionId = posthogData.$sesid?.[1];
      } catch (error) {
        console.error("Error parsing PostHog cookie:", error);
      }
    }
    console.log("Frontend: posthog-" + phSessionId);

    //get _fbc cookie from browser
    let fbc = document.cookie
      .split("; ")
      .find((row) => row.startsWith("_fbc"))
      ?.split("=")[1];
    //get _fbp cookie from browser
    // console.log(fbc);
    let fbp = document.cookie
      .split("; ")
      .find((row) => row.startsWith("_fbp"))
      ?.split("=")[1];
    if (!fbc) {
      //get fbclid from url
      const fbclid = new URLSearchParams(window.location.search).get("fbclid");
      if (fbclid) {
        fbc = `fb.2.${Math.floor(Date.now() / 1000)}.${fbclid}`;
      }
    }

    // console.log(fbp);
    //set _fbc cookie value to hidden input
    const fbcInput = document.querySelector('input[name="fbc"]');
    if (fbcInput) {
      fbcInput.setAttribute("value", fbc ?? "");
    }
    const fbpInput = document.querySelector('input[name="fbp"]');
    if (fbpInput) {
      fbpInput.setAttribute("value", fbp ?? "");
    }
    const phidInput = document.querySelector('input[name="phid"]');
    if (phidInput) {
      phidInput.setAttribute("value", phSessionId ?? "");
    }
  </script>
  <main>
    <div class="flex flex-col gap-2 items-center px-3 text-blue">
      <h1 class="text-2xl leading-6 text-blue">
        Venha para o LactoFlow®: {pcId}
      </h1>
      <form
        class="flex flex-col gap-1.5 w-full font-bold"
        method="post"
        action="/forms/leads-astro"
      >
        <label class="">
          Nome:
          <input type="text" required placeholder="Nome" name="name" />
        </label>
        <label>
          Email:
          <input
            type="email"
            required
            placeholder="maeincrivel@gmail.com"
            name="email"
          />
        </label>
        <label>
          Whatsapp:
          <ReactPhoneInput client:idle />
        </label>
        <input
          type="text"
          name="source"
          hidden
          value={path + "?" + search.toString()}
        />
        <input type="text" name="cta" hidden value="" />
        <input type="text" name="fbc" hidden />
        <input type="text" name="fbp" hidden />
        <input type="text" name="phid" hidden />
        <input
          type="text"
          name="location"
          hidden
          value={JSON.stringify(locationInfo)}
        />
        <input
          type="text"
          name="city"
          hidden
          value={locationInfo.city?.toString().replaceAll('\"', "")}
        />
        <input
          type="text"
          name="city-lwr"
          hidden
          value={locationInfo.city
            ?.toString()
            .replace(/\s+/g, "")
            .toLowerCase()}
        />
        <input
          type="text"
          name="state"
          hidden
          value={locationInfo.region?.toLowerCase()}
        />

        <input
          type="text"
          name="countryName"
          hidden
          value={locationInfo.country?.toString()}
        />
        <input
          type="text"
          name="countryCode"
          hidden
          value={locationInfo.country_code?.toString()}
        />
        <input type="text" name="clientID" hidden value={clientID} />
        <button
          class="mx-auto mt-4 w-full rounded-lg border-b-4 border-b-[#236C0F] bg-[#40C351] px-2 py-3 text-[13.6px] font-extrabold uppercase text-cream hover:scale-[104%] hover:border-b-[#44972d] hover:bg-[#236C0F] lg:py-5 lg:text-[22.6px]"
        >
          Quero entrar!
        </button>
        <h3 class="text-center text-base text-blue">
          SEUS DADOS ESTÃO SEGUROS
        </h3>
      </form>
    </div>
  </main>
</div>
