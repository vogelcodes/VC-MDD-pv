---
import Layout from "../../layouts/Layout.astro";
import { getLeads } from "../../utils/leadService"; // Import the service

// Fetch leads using the service, which handles caching and transformation
const leads: Record<string, string>[] = await getLeads();

console.log(`Fetched ${leads.length} leads for admin page.`);

// show every lead as a card, sorted by date (assuming 'Date' is the key)
// Sort based on the 'Date' property of the objects
let latestLeads = [...leads].sort(
  (a: Record<string, string>, b: Record<string, string>) => {
    // Ensure dates are valid before comparing
    const dateA = a.Date ? new Date(a.Date).getTime() : 0;
    const dateB = b.Date ? new Date(b.Date).getTime() : 0;
    // Sort descending (newest first)
    return dateB - dateA;
  }
);
---

<Layout title="Admin Dashboard">
  <main class="bg-blue min-h-screen">
    <h1>Admin Dashboard</h1>
    <p>
      Welcome to the admin area. This page is protected by HTTP Basic
      Authentication.
    </p>
    <h2>Latest Leads ({latestLeads.length})</h2>
    <div class="lead-list">
      {
        latestLeads.map((lead) => {
          // Display relevant lead information
          return (
            <div class="card text-blue">
              <p>
                <strong>Date:</strong>{" "}
                {lead.Date
                  ? new Date(lead.Date).toLocaleString()
                  : "Invalid Date"}
              </p>
              <p>
                <strong>Name:</strong> {lead.name ?? "N/A"}
              </p>
              <p>
                <strong>Email:</strong> {lead.email ?? "N/A"}
              </p>
              <p>
                <strong>Phone:</strong> {lead["intl-phone"] ?? "N/A"}
              </p>
              <p>
                <strong>Source:</strong> {lead.source ?? "N/A"}
              </p>
              {/* Add more fields as needed */}
            </div>
          );
        })
      }
    </div>
  </main>
</Layout>

<style>
  .lead-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
  }
  .card {
    color: 
    border: 1px solid #ccc;
    padding: 1rem;
    border-radius: 8px;
    background-color: #f9f9f9;
    overflow-wrap: break-word; /* Prevent long strings from overflowing */
  }
  .card p {
    margin: 0.5rem 0;
  }
</style>
