---
import { date } from "astro:schema";
import pkg from "hash.js"; // Correct named import
const { sha256 } = pkg;

const { id } = Astro.params;

const META_PIXEL_ACCESS_TOKEN = import.meta.env.META_PIXEL_ACCESS_TOKEN;
const META_PIXEL_ID = import.meta.env.META_PIXEL_ID;

if (Astro.request.method === "POST") {
  const userIP = Astro.clientAddress;
  const agent = Astro.request.headers.get("user-agent");
  console.log("Agent:", agent);
  const requestBody = await Astro.request.json();
  console.log("Received payload:", JSON.stringify(requestBody, null, 2));

  // Check if the event is PURCHASE_APPROVED
  if (requestBody.event !== "PURCHASE_APPROVED") {
    console.log("Event is not PURCHASE_APPROVED, skipping Meta event.");
    return new Response(
      JSON.stringify({
        message: "Event is not PURCHASE_APPROVED, skipping Meta event.",
      }),
      {
        headers: {
          "content-type": "application/json",
        },
        status: 200,
      }
    );
  }

  const { data } = requestBody;

  const { buyer, purchase } = data;

  if (!buyer || !purchase) {
    console.error("Missing buyer or purchase data in the payload.");
    return new Response(
      JSON.stringify({
        error: "Missing buyer or purchase data in the payload.",
      }),
      {
        headers: {
          "content-type": "application/json",
        },
        status: 400,
      }
    );
  }
  const {
    email,
    name,
    first_name,
    last_name,
    checkout_phone_code,
    checkout_phone,
    address,
  } = buyer;
  const { full_price, transaction, order_date, payment, offer } = purchase;

  const firstName = first_name;
  const lastName = last_name;

  const ct = sha256() // Directly use sha256()
    .update(address?.city?.toString().replace(/\s+/g, "").toLowerCase() || "") //using country as city for this implementation
    .digest("hex");
  const st = sha256()
    .update(address?.state || "")
    .digest("hex"); // Directly use sha256()
  const country = sha256() // Directly use sha256()
    .update(address?.country || "")
    .digest("hex");
  const fn = sha256() // Directly use sha256()
    .update(firstName?.toLowerCase() || "")
    .digest("hex");

  const ln = sha256() // Directly use sha256()
    .update(lastName?.toLowerCase() || "")
    .digest("hex");

  const em = sha256() // Directly use sha256()
    .update(email?.toString().trim().toLowerCase() || "")
    .digest("hex");
  const phone = "+55" + checkout_phone.toString();
  console.log(phone);

  const ph = sha256()
    .update(phone?.toString() || "")
    .digest("hex"); // Directly use sha256()

  const metaEventData = {
    data: [
      {
        event_name: "Purchase", // Standard event name for a purchase
        //        event_time: Math.floor(order_date / 1000), // Current timestamp in seconds
        event_time: Math.floor(Date.now() / 1000), // Current timestamp in seconds
        action_source: "website",
        event_id: transaction, // Using the transaction as the event id
        event_source_url: offer.code,
        user_data: {
          em: em, // Hashed email
          ph: ph, // Hashed phone number
          fn: fn, //hashed first name
          ln: ln, // hashed last name
          ct: ct, //hashed city
          st: st, // hashed state
          country: country, // hashed country name
          client_ip_address: userIP,
          client_user_agent: agent,
        },
        custom_data: {
          currency: full_price.currency_value,
          value: full_price.value,
        },
      },
    ],
  };
  console.log(
    "Meta Conversion API Event Data:",
    JSON.stringify(metaEventData),
    buyer
  );
  const sendToMeta = async () => {
    try {
      if (!META_PIXEL_ACCESS_TOKEN || !META_PIXEL_ID) {
        console.error(
          "META_PIXEL_ACCESS_TOKEN or META_PIXEL_ID are not set in environment variables"
        );
        return;
      }
      const response = await fetch(
        `https://graph.facebook.com/v18.0/${META_PIXEL_ID}/events?access_token=${META_PIXEL_ACCESS_TOKEN}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(metaEventData),
        }
      );

      const result = await response.json();
      console.log("Meta Conversion API Response:", result);

      if (result.error) {
        console.error("Meta Conversion API Error:", result.error);
      }
    } catch (error) {
      console.error("Error sending data to Meta Conversion API:", error);
    }
  };

  // Call the function to send data to Meta
  await sendToMeta();

  return new Response(
    JSON.stringify({
      message: "Purchase event sent to Meta successfully",
      requestBody,
    }),
    {
      headers: {
        "content-type": "application/json",
      },
      status: 200,
    }
  );
}
---
