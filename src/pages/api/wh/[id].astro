---
import { date } from "astro:schema";
import pkg from "hash.js"; // Correct named import
const { sha256 } = pkg;
import { getLeads } from "../../../utils/leadService"; // Import getLeads
import { sendToMeta as sendToMetaUtil } from "../../../utils/metaConversionsAPI"; // Import the utility function

const { id } = Astro.params;

const META_PIXEL_ACCESS_TOKEN = import.meta.env.META_PIXEL_ACCESS_TOKEN;
const META_PIXEL_ID = import.meta.env.META_PIXEL_ID;

if (Astro.request.method === "POST") {
  let userIP = null;
  let agent = null;
  const requestBody = await Astro.request.json();
  console.log("Received payload:", JSON.stringify(requestBody, null, 2));

  // Check if the event is PURCHASE_APPROVED
  if (requestBody?.event !== "PURCHASE_APPROVED") {
    return new Response(null, { status: 204 }); // Return success but do nothing
  }

  const { data } = requestBody;

  const { buyer, purchase } = data;

  if (!buyer || !purchase) {
    console.error("Missing buyer or purchase data in the payload.");
    return new Response(
      JSON.stringify({
        error: "Missing buyer or purchase data in the payload.",
      }),
      {
        headers: {
          "content-type": "application/json",
        },
        status: 400,
      }
    );
  }
  const {
    email,
    name,
    first_name,
    last_name,
    checkout_phone_code,
    checkout_phone,
    address,
  } = buyer;
  const { full_price, transaction, order_date, payment, offer } = purchase;

  const firstName = first_name;
  const lastName = last_name;
  console.time("fetchLeads");
  const leads = await getLeads();
  console.timeEnd("fetchLeads");

  // Find the lead matching the buyer's email
  // Let's find all the matching leads and then we'll use the latest fbp and fbc
  const matchingLeads = leads.filter(
    (lead) => lead.email?.trim().toLowerCase() === email?.trim().toLowerCase()
  );

  // First try to find the latest lead with non-null fbc and fbp
  const leadWithFbData = matchingLeads
    .filter((lead) => lead.fbc && lead.fbp)
    .sort((a, b) => new Date(b.Date).getTime() - new Date(a.Date).getTime())[0];

  // If no lead with fb data found, use the latest lead
  const latestLead =
    leadWithFbData ||
    matchingLeads.sort(
      (a, b) => new Date(b.Date).getTime() - new Date(a.Date).getTime()
    )[0];

  let fbp = null;
  let fbc = null;
  let ct = null;
  let st = null;

  if (latestLead) {
    fbp = latestLead.fbp || null; // Get fbp or null if missing
    fbc = latestLead.fbc || null; // Get fbc or null if missing
    ct = sha256() // Directly use sha256()
      .update(
        latestLead?.["city-lwr"].toString().replace(/\s+/g, "").toLowerCase() ||
          ""
      ) //using country as city for this implementation
      .digest("hex");
    st = sha256()
      .update(
        latestLead?.["state"].toString().replace(/\s+/g, "").toLowerCase() || ""
      )
      .digest("hex"); // Directly use sha256()
    userIP = latestLead?.["client_ip_address"] || null;
    agent = latestLead?.["client_user_agent"] || null;
    console.log(`Found matching lead for ${email}: fbp=${fbp}, fbc=${fbc}`);
  } else {
    console.log(`No matching lead found for email: ${email}`);
  }

  const country = sha256() // Directly use sha256()
    .update(address?.country_iso.toString().toLowerCase() || "")
    .digest("hex");
  const fn = sha256() // Directly use sha256()
    .update(firstName?.toLowerCase() || "")
    .digest("hex");

  const ln = sha256() // Directly use sha256()
    .update(lastName?.toLowerCase() || "")
    .digest("hex");

  const em = sha256() // Directly use sha256()
    .update(email?.toString().trim().toLowerCase() || "")
    .digest("hex");
  const phone = "+55" + checkout_phone.toString();

  const ph = sha256()
    .update(phone?.toString() || "")
    .digest("hex"); // Directly use sha256()

  // Fetch leads data

  const metaEventData = {
    data: [
      {
        event_name: "Purchase", // Standard event name for a purchase
        //        event_time: Math.floor(order_date / 1000), // Current timestamp in seconds
        event_time: Math.floor(Date.now() / 1000), // Current timestamp in seconds
        action_source: "website",
        event_id: transaction, // Using the transaction as the event id
        event_source_url: offer.code,
        user_data: {
          em: em, // Hashed email
          ph: ph, // Hashed phone number
          fn: fn, //hashed first name
          ln: ln, // hashed last name
          ct: ct, //hashed city
          st: st, // hashed state
          country: country, // hashed country name
          client_ip_address: userIP ? String(userIP) : undefined, // Ensure IP is a string
          client_user_agent: agent,
          fbp: fbp, // Add fbp
          fbc: fbc, // Add fbc
        },
        custom_data: {
          currency: full_price.currency_value,
          value: full_price.value,
        },
      },
    ],
  };
  console.log(
    "Meta Conversion API Event Data:",
    JSON.stringify(metaEventData),
    buyer
  );

  // Call the imported utility function instead
  await sendToMetaUtil(metaEventData);

  return new Response(
    JSON.stringify({
      message: "Purchase event sent to Meta successfully",
      requestBody,
    }),
    {
      headers: {
        "content-type": "application/json",
      },
      status: 200,
    }
  );
}
---
