---
import { date } from "astro:schema";
import { sendToMeta } from "../../utils/metaConversionsAPI";
import { UAParser } from "ua-parser-js";
import { getLeads } from "../../utils/leadService"; // Import the new service
import { hashUserData, type RawUserData } from "../../utils/hashing"; // Import the new hashing utility

// import { GoogleSpreadsheet } from "google-spreadsheet";
// import { JWT } from "google-auth-library";

// const SCOPES = [
//   "https://www.googleapis.com/auth/spreadsheets",
//   "https://www.googleapis.com/auth/drive.file",
// ];

// const jwt = new JWT({
//   email: import.meta.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
//   key: import.meta.env.GOOGLE_PRIVATE_KEY,
//   scopes: SCOPES,
// });
// const doc = new GoogleSpreadsheet(
//   "1LTTnaYcOwe_-_U1RNK-Kp37gxrzTP7cMIyGLzFaMvHI",
//   jwt
// );
// await doc.loadInfo(); // loads document properties and worksheets
// console.log(doc.title);
// await doc.updateProperties({ title: "renamed doc" });

// const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
// console.log(sheet.title);
// console.log(sheet.rowCount);

// Initialize leads cache at build time

const GSHEET_POST_WH_URL = import.meta.env.GSHEET_POST_WH_URL;
// GSHEET_GET_WH_URL is now only used within leadService.ts
// const GSHEET_GET_WH_URL = import.meta.env.GSHEET_GET_WH_URL;
const TELEGRAM_BOT_URL = import.meta.env.TELEGRAM_BOT_URL;
const DRY_RUN = import.meta.env.DEBUG === "1";

// Retrieve location info potentially set by middleware

if (Astro.request.method === "POST") {
  // This function now just calls the imported service
  async function fetchLeads() {
    // console.log("Fetching leads via leadService...");
    try {
      // Call the imported getLeads function which handles fetching and caching
      const leadsData = await getLeads(true);
      // console.log(`Fetched ${leadsData.length} leads via leadService.`);
      return leadsData;
    } catch (error) {
      // Error handling is mostly within getLeads, but catch any potential issues here too
      console.error("Error calling getLeads from leads-astro.astro:", error);
      return []; // Return empty array on error
    }
  }

  // console.time("onLeadSubmit");
  const userIP = Astro.clientAddress;
  const agent = Astro.request.headers.get("user-agent") || "";
  const userAgentInfo = UAParser(agent) || ""; // Rename for clarity
  const clarityID = decodeURIComponent(Astro.cookies.get("_clck")?.value || "");
  let phid = "";
  const phIdCookie = decodeURIComponent(
    Astro.cookies.get(
      "ph_phc_4DIZK7fR8ZBfhTUf8TQSt2WNMFwFvDsBUOUQ05kMu01_posthog"
    )?.value || ""
  );
  if (phIdCookie) {
    try {
      const decodedPosthog = decodeURIComponent(phIdCookie);
      const posthogData = JSON.parse(decodedPosthog);
      phid = posthogData.$sesid?.[1];
    } catch (error) {
      console.error("Error parsing PostHog cookie:", error);
    }
  }

  // console.log(agent, userIP);
  const data = await Astro.request.formData();
  console.log(data); // Keep: Lead form submission data
  const name = data.get("name")?.toString() || ""; // Ensure string
  const firstName = name.split(" ")[0];
  const lastName = name.slice(name.indexOf(" ") + 1);
  const email = data.get("email")?.toString().trim().toLowerCase() || "";

  const phoneac = data.get("phoneac") || ""; // Area code if needed separately
  const phone = data.get("phone") || ""; // Local part of phone if needed separately
  const intlPhone = data.get("intl-phone")?.toString() || ""; // Full international number
  const city = data.get("city")?.toString() || "";
  const source = data.get("source") || "";
  const searchParams = new URLSearchParams(source.toString().split("?")[1]);
  //lets concatanate all search params values with "|"
  const sck = Array.from(searchParams.entries())
    .map(([key, value]) =>
      !["fbclid", "mcp_token"].includes(key) ? `${value}` : ""
    )
    .join("|");
  const cta = data.get("cta") || "";

  // Use location info from middleware if available, otherwise maybe from form data as fallback?
  const locationData = JSON.parse(data.get("location")?.toString() || "{}");
  const stateOrRegion = locationData?.region || data.get("state")?.toString(); // Use state/region from middleware or form
  const countryCode =
    locationData?.countryCode || data.get("countryCode")?.toString(); // Use country code from middleware or form

    const clientID = data.get("clientID"); // Assuming this comes from client-side
    const eventId = Astro.cookies.get("event_id")?.value;
    let fbp = data.get("fbp"); // Assuming this comes from client-side cookie reading
    let fbc = data.get("fbc"); // Assuming this comes from client-side cookie reading
  const creationTime = Math.floor(Date.now() / 1000);
  if (fbc == "" && searchParams.get("fbclid")) {
    fbc = `fb.2.${creationTime}.${searchParams.get("fbclid")}`;
  }
  if (fbp == "" && searchParams.get("fbclid")) {
    // console.log("No existing fbp cookie found, generating new one."); // Informational
    const randomNumber = Math.floor(Math.random() * 10000000000);
    fbp = `fb.1.${creationTime}.${randomNumber}`;
  }

  // Prepare raw data for hashing
  const rawData: RawUserData = {
    email: email,
    phone: intlPhone?.replace(/[^0-9]/g, ""), // Pass only digits to hashing function
    firstName: firstName,
    lastName: lastName,
    city: city,
    state: stateOrRegion,
    countryCode: countryCode,
  };

  // Generate hashes using the utility
  const hashedUserData = hashUserData(rawData);

  const fields: { [key: string]: any } = {};
  // console.log(name, email, intlPhone, source, cta); // Comment out: Redundant info shown in 'data' log
  data.forEach((value, key) => {
    fields[key] = value;
  });

  const metaEventData = {
    data: [
      {
        event_name: "Lead",
        event_time: Math.floor(Date.now() / 1000),
        action_source: "website",
          event_id: eventId,
        user_data: {
          ...hashedUserData, // Spread the generated hashes
          client_ip_address: userIP ? String(userIP) : undefined, // Ensure IP is a string
          client_user_agent: agent, // Agent from Astro
          fbc: fbc || undefined, // Use client-side value if available
          fbp: fbp || undefined, // Use client-side value if available
          external_id: clientID,
        },
        custom_data: {
          cta: data.get("cta"),
        },
      },
    ],
  };
  // sheet.setHeaderRow(["name", "email", "phone", "city", "state", "country"]);
  // sheet.addRow({
  //   name: name?.toString() || "",
  //   email: email?.toString() || "",
  //   phone: intlPhone?.toString() || "",
  //   city: data.get("city")?.toString() || "",
  //   state: data.get("state")?.toString() || "",
  //   country: data.get("countryName")?.toString() || "",
  // });

  console.log("Meta Conversion API Event Data:", JSON.stringify(metaEventData)); // Keep: Meta Event Data

  // Call the function to send data to Meta
  if (!DRY_RUN) {
    sendToMeta(metaEventData);
  } else {
    console.log("DEBUG MODE: Not sending to Meta");
    console.log(JSON.stringify(metaEventData, null, 2));
  }

  // Do something with the data
  // Redirect to a thank you page
  // return Astro.redirect(
  //   // `https://pay.hotmart.com/O84147403X?off=w49bayjs&checkoutMode=10&sck=${source}&email=${email}&name=${name}&phonenumber=${phoneac}`
  //   `/thank-you`
  // );
  async function sendLeadToTelegram(
    dryRun: boolean,
    leadName: string, // Pass name explicitly
    leadEmail: string,
    leadIntlPhone: string,
    leadCta: string,
    leadCountryCode: string | undefined, // Use potentially undefined values
    leadCity: string,
    leadRegion: string | undefined, // Use potentially undefined values
    leadUserAgentOS: string | undefined, // Use potentially undefined value
    leadSource: string
  ) {
    const leadsList = await fetchLeads();
    const emailCount = leadsList.filter(
      (item) => item.email?.trim().toLowerCase() === email?.trim().toLowerCase()
    ).length;
    const telegramURL = `${TELEGRAM_BOT_URL}&text=${encodeURIComponent(
      `${emailCount <= 1 ? "Nova Lead:" : emailCount + "x Lead:"}\n${leadName}\n${leadEmail}\n${leadIntlPhone}\n${"CTA: " + (leadCta ?? "")}\n${leadCountryCode || "N/A"} - ${leadCity || "N/A"} - ${leadRegion || "N/A"}\n${leadUserAgentOS || "N/A"}\n${decodeURIComponent(leadSource ?? "")}\nhttps://api.whatsapp.com/send?phone=${leadIntlPhone
        .replace("+", "")
        .trim()}&text=${encodeURIComponent(
        `Oi ${leadName.split(" ")[0]}! Tudo bem?❤\n\nAqui é a Bárbara e faço parte da equipe do Lactoflow.🥰\n\nVi que você se interessou pelo curso Lactoflow.\n\nVocê está com alguma dificuldade com a sua amamentação?` // Use first name from passed name
      )}
      `
    )}`;

    if (!dryRun) {
      const telegramMessage = fetch(telegramURL);
    } else {
      console.log("DEBUG MODE: Not sending to Telegram"); // Keep: Debug info
      console.log(telegramURL); // Keep: Debug info
    }
    const response = fetch(GSHEET_POST_WH_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        Date: new Date().toISOString(),
        ...fields, // Use original form fields for sheet
        client_ip_address: userIP, // Add IP
        client_user_agent: agent, // Add full user agent
        firstName: leadName.split(" ")[0], // Add firstName
        lastName: leadName.slice(leadName.indexOf(" ") + 1), // Add lastName
        lead_count: emailCount + 1,
        is_returning_lead: emailCount > 0 ? "true" : "false",
        // Add location details if needed in sheet
        geo_country: locationData?.countryCode,
        geo_region: locationData?.regionName,
        geo_city: locationData?.city,
        phid: phid,
        clarityID: clarityID,
      }),
    })
      .then((res) => res.json())
      // .then((json) => console.log("Google Sheet POST Response:", json)); // Comment out: GSheet response
      .then((json) => {}); // Keep the .then chain, just remove the log
    // console.timeEnd("onLeadSubmit"); // Comment out: Timing info
  }

  // Call sendLeadToTelegram with correct variables
  sendLeadToTelegram(
    DRY_RUN,
    name, // Pass the full name
    email,
    intlPhone,
    cta.toString(),
    countryCode, // Pass potentially updated country code
    city,
    stateOrRegion, // Pass potentially updated state/region
    userAgentInfo.os.name, // Pass OS name
    source.toString()
  );

  if (!DRY_RUN) {
    return new Response(null, {
      status: 302,
      headers: {
        Location: `https://pay.hotmart.com/O84147403X?off=w49bayjs&checkoutMode=10&sck=${sck}&email=${email}&name=${name}&phonenumber=${phoneac}`,
      },
    });
  } else {
    console.log("DEBUG MODE: Not redirecting to Hotmart");
    console.log(
      `https://pay.hotmart.com/O84147403X?off=w49bayjs&checkoutMode=10&sck=${source}&email=${email}&name=${name}&phonenumber=${phoneac}`
    );
  }

  // Fallback response if not redirecting
  return new Response(
    JSON.stringify({
      message: "Lead processed in DEBUG mode.",
      submitted_data: fields,
      hashed_data: hashedUserData,
      redirect_url: `https://pay.hotmart.com/O84147403X?off=w49bayjs&checkoutMode=10&sck=${sck}&email=${email}&name=${name}&phonenumber=${phoneac}`,
    }),
    {
      headers: {
        "content-type": "application/json", // Return JSON for debug
      },
    }
  );
}
---
