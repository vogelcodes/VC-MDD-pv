---
import { date } from "astro:schema";
import pkg from "hash.js"; // Correct named import
const { sha256 } = pkg;
import { sendToMeta } from "../../utils/metaConversionsAPI";
// import { GoogleSpreadsheet } from "google-spreadsheet";
// import { JWT } from "google-auth-library";

// const SCOPES = [
//   "https://www.googleapis.com/auth/spreadsheets",
//   "https://www.googleapis.com/auth/drive.file",
// ];

// const jwt = new JWT({
//   email: import.meta.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
//   key: import.meta.env.GOOGLE_PRIVATE_KEY,
//   scopes: SCOPES,
// });
// const doc = new GoogleSpreadsheet(
//   "1LTTnaYcOwe_-_U1RNK-Kp37gxrzTP7cMIyGLzFaMvHI",
//   jwt
// );
// await doc.loadInfo(); // loads document properties and worksheets
// console.log(doc.title);
// await doc.updateProperties({ title: "renamed doc" });

// const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
// console.log(sheet.title);
// console.log(sheet.rowCount);

const GSHEET_POST_WH_URL = import.meta.env.GSHEET_POST_WH_URL;

if (Astro.request.method === "POST") {
  console.time("onLeadSubmit");
  const userIP = Astro.clientAddress;
  const agent = Astro.request.headers.get("user-agent");
  console.log(agent, userIP);
  const data = await Astro.request.formData();
  const name = data.get("name");
  const firstName = name?.toString().split(" ")[0];
  const ct = sha256() // Directly use sha256()
    .update(data.get("city-lwr")?.toString())
    .digest("hex");
  const st = sha256().update(data.get("state")?.toString()).digest("hex"); // Directly use sha256()
  const country = sha256() // Directly use sha256()
    .update(data.get("countryName")?.toString())
    .digest("hex");
  const fn = sha256() // Directly use sha256()
    .update(firstName?.toLowerCase() || "")
    .digest("hex");

  const lastName = name?.toString().slice(name?.toString().indexOf(" ") + 1);
  const ln = sha256() // Directly use sha256()
    .update(lastName?.toLowerCase() || "")
    .digest("hex");

  const email = data.get("email");
  const em = sha256() // Directly use sha256()
    .update(email?.toString().trim().toLowerCase() || "")
    .digest("hex");

  const phoneac = data.get("phoneac");
  const phone = data.get("phone");
  const intlPhone = data.get("intl-phone");
  const intlPhoneSanitized = intlPhone?.toString().replace("+", "");
  const ph = sha256().update(intlPhoneSanitized).digest("hex"); // Directly use sha256()
  const source = data.get("source");
  const location = data.get("location");
  const clientID = data.get("clientID");
  const fbp = data.get("fbp");
  const fbc = data.get("fbc");
  const fields: { [key: string]: any } = {};
  data.forEach((value, key) => {
    fields[key] = value;
  });
  const metaEventData = {
    data: [
      {
        event_name: "Lead", // Standard event name for a lead
        event_time: Math.floor(Date.now() / 1000), // Current timestamp in seconds
        action_source: "website",
        event_id: clientID, // You could also generate a unique ID here
        user_data: {
          em: em, // Hashed email
          ph: ph, // Hashed phone number
          fn: fn, //hashed first name
          ln: ln, // hashed last name
          ct: ct, //hashed city
          st: st, // hashed state
          country: country, // hashed country name
          client_ip_address: userIP,
          client_user_agent: agent,
          fbc,
          fbp,
        },
        custom_data: {
          source: source,
          city: data.get("city"),
          cta: data.get("cta"),
        },
      },
    ],
  };
  // sheet.setHeaderRow(["name", "email", "phone", "city", "state", "country"]);
  // sheet.addRow({
  //   name: name?.toString() || "",
  //   email: email?.toString() || "",
  //   phone: intlPhone?.toString() || "",
  //   city: data.get("city")?.toString() || "",
  //   state: data.get("state")?.toString() || "",
  //   country: data.get("countryName")?.toString() || "",
  // });

  console.log("Meta Conversion API Event Data:", JSON.stringify(metaEventData));

  // Call the function to send data to Meta
  sendToMeta(metaEventData);

  // Do something with the data
  // Redirect to a thank you page
  // return Astro.redirect(
  //   // `https://pay.hotmart.com/O84147403X?off=32k5pbhv&checkoutMode=10&sck=${source}&email=${email}&name=${name}&phonenumber=${phoneac}`
  //   `/thank-you`
  // );
  const response = fetch(GSHEET_POST_WH_URL, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      Date: new Date().toISOString(),
      ...fields,
      client_ip_address: userIP,
      client_user_agent: agent,
      firstName,
      lastName,
    }),
  })
    .then((res) => res.json())
    .then((json) => console.log("Google Sheet POST Response:", json));
  console.timeEnd("onLeadSubmit");
  const isCheckoutActive = false;
  if (isCheckoutActive) {
    return new Response(null, {
      status: 302,
      headers: {
        Location: `https://pay.hotmart.com/O84147403X?off=32k5pbhv&checkoutMode=10&sck=${source}&email=${email}&name=${name}&phonenumber=${phoneac}`,
      },
    });
  }
  return new Response(
    JSON.stringify({
      ...fields,
      firstName,
      lastName,
      fn,
      ln,
      em,
      ph,
      ct,
      st,
      country,
      client_user_agent: agent,

      client_ip_address: userIP,
      redirect: `https://pay.hotmart.com/O84147403X?off=32k5pbhv&checkoutMode=10&sck=${source}&email=${email}&name=${name}&phonenumber=${phoneac}`,
    }),
    {
      headers: {
        "content-type": "text/plain",
      },
    }
  );
}
---
