---
import { date } from "astro:schema";
import { sendToMeta } from "../../utils/metaConversionsAPI";
import { UAParser } from "ua-parser-js";
import { getLeads } from "../../utils/leadService";
import { hashUserData, type RawUserData } from "../../utils/hashing";
// Import LocationInfo type directly for parsing
import type { LocationInfo } from "../../utils/crypto";
import { decryptData } from "../../utils/crypto";
// import { GoogleSpreadsheet } from "google-spreadsheet";
// import { JWT } from "google-auth-library";

// const SCOPES = [
//   "https://www.googleapis.com/auth/spreadsheets",
//   "https://www.googleapis.com/auth/drive.file",
// ];

// const jwt = new JWT({
//   email: import.meta.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
//   key: import.meta.env.GOOGLE_PRIVATE_KEY,
//   scopes: SCOPES,
// });
// const doc = new GoogleSpreadsheet(
//   "1LTTnaYcOwe_-_U1RNK-Kp37gxrzTP7cMIyGLzFaMvHI",
//   jwt
// );
// await doc.loadInfo(); // loads document properties and worksheets
// console.log(doc.title);
// await doc.updateProperties({ title: "renamed doc" });

// const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
// console.log(sheet.title);
// console.log(sheet.rowCount);

// Initialize leads cache at build time

const GSHEET_POST_WH_URL = import.meta.env.GSHEET_POST_WH_URL;
// GSHEET_GET_WH_URL is now only used within leadService.ts
// const GSHEET_GET_WH_URL = import.meta.env.GSHEET_GET_WH_URL;
const TELEGRAM_BOT_URL = import.meta.env.TELEGRAM_BOT_URL;
const DRY_RUN = import.meta.env.DEBUG === "1";

// REMOVED retrieval from Astro.locals
// const locationInfoFromMiddleware = Astro.locals.locationInfo as LocationInfo | null;

if (Astro.request.method === "POST") {
  // This function now just calls the imported service
  async function fetchLeads() {
    console.log("Fetching leads via leadService...");
    try {
      // Call the imported getLeads function which handles fetching and caching
      const leadsData = await getLeads();
      console.log(`Fetched ${leadsData.length} leads via leadService.`);
      return leadsData;
    } catch (error) {
      // Error handling is mostly within getLeads, but catch any potential issues here too
      console.error("Error calling getLeads from leads-astro.astro:", error);
      return []; // Return empty array on error
    }
  }

  console.time("onLeadSubmit");
  const userIP = Astro.clientAddress;
  const agent = Astro.request.headers.get("user-agent") || "";
  const userAgentInfo = UAParser(agent) || ""; // Rename for clarity

  console.log(agent, userIP);
  const data = await Astro.request.formData();
  console.log("Form Data Received:", data);

  // --- Basic Form Data ---
  const name = data.get("name")?.toString() || "";
  const firstName = name.split(" ")[0];
  const lastName = name.slice(name.indexOf(" ") + 1);
  const email = data.get("email")?.toString().trim().toLowerCase() || "";
  const phoneac = data.get("phoneac") || "";
  const phone = data.get("phone") || "";
  const intlPhone = data.get("intl-phone")?.toString() || "";
  const source = data.get("source") || "";
  const cta = data.get("cta") || "";
  const clientID = data.get("clientID"); // From hidden client-side generated field
  const fbp = data.get("fbp"); // From hidden client-side JS field
  const fbc = data.get("fbc"); // From hidden client-side JS field

  // --- Location Data (from hidden input set by Precheckout) ---
  const locationHashed =
    data.get("location")?.toString().replaceAll('"', "") || "";
  console.log("locationHashed", locationHashed);
  const locationDecrypted = JSON.parse(decryptData(locationHashed) || "{}");
  console.log("locationDecrypted", locationDecrypted);

  let locationData: LocationInfo | null = locationDecrypted;

  // Use parsed location data directly for city, state, country
  const city = locationData?.city || ""; // Get city from parsed data
  const stateOrRegion = locationData?.region; // Get region/state code (e.g., RJ, CA)
  const countryCode = locationData?.countryCode; // Get country code (e.g., BR, US)
  const regionName = locationData?.regionName; // Full region name for display/sheets
  const countryName = locationData?.country; // Full country name for display/sheets

  // --- Prepare raw data for hashing ---
  const rawData: RawUserData = {
    email: email,
    phone: intlPhone?.replace(/[^0-9]/g, ""),
    firstName: firstName,
    lastName: lastName,
    city: city,
    state: stateOrRegion,
    countryCode: countryCode,
  };
  const hashedUserData = hashUserData(rawData);

  // --- Collect all original form fields for potential logging/storage ---
  const fields: { [key: string]: any } = {};
  data.forEach((value, key) => {
    fields[key] = value;
  });
  console.log("Original Form Fields:", fields);

  // --- Prepare Meta Event Data ---
  const metaEventData = {
    data: [
      {
        event_name: "Lead",
        event_time: Math.floor(Date.now() / 1000),
        action_source: "website",
        event_id: clientID?.toString(), // Ensure string
        user_data: {
          ...hashedUserData,
          client_ip_address: userIP,
          client_user_agent: agent,
          fbc: fbc?.toString() || undefined,
          fbp: fbp?.toString() || undefined,
          external_id: clientID?.toString(), // Ensure string
        },
        custom_data: {
          source: source?.toString(),
          city: city, // Use city from parsed location
          cta: cta?.toString(),
        },
      },
    ],
  };
  // sheet.setHeaderRow(["name", "email", "phone", "city", "state", "country"]);
  // sheet.addRow({
  //   name: name?.toString() || "",
  //   email: email?.toString() || "",
  //   phone: intlPhone?.toString() || "",
  //   city: data.get("city")?.toString() || "",
  //   state: data.get("state")?.toString() || "",
  //   country: data.get("countryName")?.toString() || "",
  // });

  console.log("Meta Conversion API Event Data:", JSON.stringify(metaEventData));

  // Call the function to send data to Meta
  if (!DRY_RUN) {
    sendToMeta(metaEventData);
  } else {
    console.log("DEBUG MODE: Not sending to Meta");
    console.log(JSON.stringify(metaEventData, null, 2));
  }

  // Do something with the data
  // Redirect to a thank you page
  // return Astro.redirect(
  //   // `https://pay.hotmart.com/O84147403X?off=32k5pbhv&checkoutMode=10&sck=${source}&email=${email}&name=${name}&phonenumber=${phoneac}`
  //   `/thank-you`
  // );
  async function sendLeadToTelegram(
    dryRun: boolean,
    leadName: string,
    leadEmail: string,
    leadIntlPhone: string,
    leadCta: string,
    leadCountryCode: string | undefined,
    leadCity: string,
    leadRegionName: string | undefined, // Use full region name for display
    leadUserAgentOS: string | undefined,
    leadSource: string
  ) {
    const leadsList = await fetchLeads();
    const emailCount = leadsList.filter(
      (item) => item.email === leadEmail
    ).length;
    const whatsappLink = `https://api.whatsapp.com/send?phone=${leadIntlPhone.replace(/[^0-9]/g, "")}&text=${encodeURIComponent(
      `Oi ${leadName.split(" ")[0]}! Tudo bem?‚ù§\n\nAqui √© a B√°rbara e fa√ßo parte da equipe do Lactoflow.ü•∞\n\nVi que voc√™ se interessou pelo curso Lactoflow.\n\nVoc√™ est√° com alguma dificuldade com a sua amamenta√ß√£o?`
    )}`;
    const telegramText = `${emailCount <= 1 ? "Nova Lead:" : emailCount + "x Lead:"}
Name: ${leadName}
Email: ${leadEmail}
Phone: ${leadIntlPhone}
CTA: ${leadCta || "N/A"}
Location: ${leadCity || "N/A"}, ${leadRegionName || "N/A"}, ${leadCountryCode || "N/A"}
OS: ${leadUserAgentOS || "N/A"}
Source: ${decodeURIComponent(leadSource || "N/A")}
WA Link: ${whatsappLink}`;
    const telegramURL = `${TELEGRAM_BOT_URL}&text=${encodeURIComponent(telegramText)}`;

    if (!dryRun) {
      fetch(telegramURL).catch((e) =>
        console.error("Telegram fetch error:", e)
      ); // Fire and forget, but log errors
    } else {
      console.log("DEBUG MODE: Telegram URL:");
      console.log(telegramURL);
    }

    // Send to Google Sheet
    const sheetPayload = {
      Date: new Date().toISOString(),
      ...fields, // Send original form fields
      // Add extracted/processed data explicitly
      client_ip_address: userIP,
      client_user_agent: agent,
      firstName: leadName.split(" ")[0],
      lastName: leadName.slice(leadName.indexOf(" ") + 1),
      lead_count: emailCount + 1,
      is_returning_lead: emailCount > 0 ? "true" : "false",
      geo_country_code: locationData?.countryCode,
      geo_country_name: locationData?.country,
      geo_region_code: locationData?.region,
      geo_region_name: locationData?.regionName,
      geo_city: locationData?.city,
      geo_zip: locationData?.zip,
      geo_lat: locationData?.lat,
      geo_lon: locationData?.lon,
      geo_timezone: locationData?.timezone,
      geo_isp: locationData?.isp,
    };

    fetch(GSHEET_POST_WH_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(sheetPayload),
    })
      .then(async (res) => {
        if (!res.ok) {
          console.error(
            `Google Sheet POST Error: ${res.status} ${res.statusText}`,
            await res.text()
          );
        } else {
          console.log("Google Sheet POST Success:", await res.json());
        }
      })
      .catch((e) => console.error("Google Sheet fetch error:", e));

    console.timeEnd("onLeadSubmit");
  }

  // Call sendLeadToTelegram with correct variables
  sendLeadToTelegram(
    DRY_RUN,
    name,
    email,
    intlPhone,
    cta.toString(),
    countryCode, // Pass parsed country code
    city, // Pass parsed city
    regionName, // Pass parsed full region name
    userAgentInfo.os.name,
    source.toString()
  );

  // --- Redirect or Respond ---
  if (!DRY_RUN) {
    return new Response(null, {
      status: 302,
      headers: {
        Location: `https://pay.hotmart.com/O84147403X?off=32k5pbhv&checkoutMode=10&sck=${source}&email=${email}&name=${name}&phonenumber=${phoneac}`,
      },
    });
  } else {
    const redirectUrl = `https://pay.hotmart.com/O84147403X?off=32k5pbhv&checkoutMode=10&sck=${source}&email=${email}&name=${name}&phonenumber=${phoneac}`;
    console.log("DEBUG MODE: Not redirecting. Would redirect to:");
    console.log(redirectUrl);
    // Fallback response for debugging
    return new Response(
      JSON.stringify({
        message: "Lead processed in DEBUG mode.",
        submitted_data: fields,
        parsed_location: locationData,
        hashed_data: hashedUserData,
        meta_payload: metaEventData, // Include payload sent to Meta
        redirect_url: redirectUrl,
      }),
      { headers: { "content-type": "application/json" } }
    );
  }
}
---
