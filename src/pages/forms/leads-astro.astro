---
import { date } from "astro:schema";
import pkg from "hash.js"; // Correct named import
const { sha256 } = pkg;
import { sendToMeta } from "../../utils/metaConversionsAPI";
import { UAParser } from "ua-parser-js";

// import { GoogleSpreadsheet } from "google-spreadsheet";
// import { JWT } from "google-auth-library";

// const SCOPES = [
//   "https://www.googleapis.com/auth/spreadsheets",
//   "https://www.googleapis.com/auth/drive.file",
// ];

// const jwt = new JWT({
//   email: import.meta.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
//   key: import.meta.env.GOOGLE_PRIVATE_KEY,
//   scopes: SCOPES,
// });
// const doc = new GoogleSpreadsheet(
//   "1LTTnaYcOwe_-_U1RNK-Kp37gxrzTP7cMIyGLzFaMvHI",
//   jwt
// );
// await doc.loadInfo(); // loads document properties and worksheets
// console.log(doc.title);
// await doc.updateProperties({ title: "renamed doc" });

// const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
// console.log(sheet.title);
// console.log(sheet.rowCount);

// Initialize leads cache at build time

const GSHEET_POST_WH_URL = import.meta.env.GSHEET_POST_WH_URL;
const GSHEET_GET_WH_URL = import.meta.env.GSHEET_GET_WH_URL;
const TELEGRAM_BOT_URL = import.meta.env.TELEGRAM_BOT_URL;
if (Astro.request.method === "POST") {
  console.time("onLeadSubmit");
  const userIP = Astro.clientAddress;
  const agent = Astro.request.headers.get("user-agent") || "";
  const userAgent = UAParser(agent) || "";

  console.log(agent, userIP);
  const data = await Astro.request.formData();
  const name = data.get("name");
  const firstName = name?.toString().split(" ")[0];
  const email = data.get("email")?.toString().trim().toLowerCase() || "";

  // Check for returning lead

  const ct = sha256().update(data.get("city-lwr")?.toString()).digest("hex");
  const st = sha256().update(data.get("state")?.toString()).digest("hex");
  const country = sha256()
    .update(data.get("countryName")?.toString())
    .digest("hex");
  const fn = sha256()
    .update(firstName?.toLowerCase() || "")
    .digest("hex");

  const lastName = name?.toString().slice(name?.toString().indexOf(" ") + 1);
  const ln = sha256()
    .update(lastName?.toLowerCase() || "")
    .digest("hex");

  const em = sha256()
    .update(email || "")
    .digest("hex");

  const phoneac = data.get("phoneac") || "";
  const phone = data.get("phone") || "";
  const intlPhone = data.get("intl-phone") || "";
  const city = data.get("city") || "";
  const intlPhoneSanitized = intlPhone?.toString().replace("+", "");
  const ph = sha256().update(intlPhoneSanitized).digest("hex");
  const source = data.get("source") || "";
  const cta = data.get("cta") || "";
  const location = data.get("location");
  const locationInfo = JSON.parse(location?.toString() || "{}");
  const region = locationInfo.region || "";
  const countryCode = locationInfo.countryCode || "";
  const clientID = data.get("clientID");
  const fbp = data.get("fbp");
  const fbc = data.get("fbc");
  const fields: { [key: string]: any } = {};
  console.log(name, email, intlPhone, source, cta);
  data.forEach((value, key) => {
    fields[key] = value;
  });

  const metaEventData = {
    data: [
      {
        event_name: "Lead",
        event_time: Math.floor(Date.now() / 1000),
        action_source: "website",
        event_id: clientID,
        user_data: {
          em,
          ph,
          fn,
          ln,
          ct,
          st,
          country,
          client_ip_address: userIP,
          client_user_agent: agent,
          fbc,
          fbp,
          external_id: clientID,
        },
        custom_data: {
          source,
          city: data.get("city"),
          cta: data.get("cta"),
        },
      },
    ],
  };
  // sheet.setHeaderRow(["name", "email", "phone", "city", "state", "country"]);
  // sheet.addRow({
  //   name: name?.toString() || "",
  //   email: email?.toString() || "",
  //   phone: intlPhone?.toString() || "",
  //   city: data.get("city")?.toString() || "",
  //   state: data.get("state")?.toString() || "",
  //   country: data.get("countryName")?.toString() || "",
  // });

  console.log("Meta Conversion API Event Data:", JSON.stringify(metaEventData));

  // Call the function to send data to Meta
  sendToMeta(metaEventData);

  // Do something with the data
  // Redirect to a thank you page
  // return Astro.redirect(
  //   // `https://pay.hotmart.com/O84147403X?off=32k5pbhv&checkoutMode=10&sck=${source}&email=${email}&name=${name}&phonenumber=${phoneac}`
  //   `/thank-you`
  // );
  const response = fetch(GSHEET_POST_WH_URL, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      Date: new Date().toISOString(),
      ...fields,
      client_ip_address: userIP,
      client_user_agent: agent,
      firstName,
      lastName,
    }),
  })
    .then((res) => res.json())
    .then((json) => console.log("Google Sheet POST Response:", json));
  console.timeEnd("onLeadSubmit");
  async function sendLeadToTelegram(
    email: string,
    intlPhone: string,
    cta: string,
    country: string,
    city: string,
    region: string,
    agent: string,
    source: string
  ) {
    const response = await fetch(GSHEET_GET_WH_URL, {});
    const leadsList = await response.json();
    const latestLeads = leadsList.slice(1).sort((a: string[], b: string[]) => {
      return new Date(b[4]).getTime() - new Date(a[4]).getTime();
    });
    const emailCount = latestLeads.filter(
      (item: string[]) => item[2] === email
    ).length;
    const telegramMessage = fetch(
      `${TELEGRAM_BOT_URL}&text=${encodeURIComponent(
        `${emailCount <= 1 ? "Nova Lead:" : emailCount + "x Lead:"}\n${name}\n${email}\n${
          intlPhone
        }\n CTA:+" "${cta ?? ""}\n${
          // eslint-disable-next-line @typescript-eslint/restrict-plus-operands, @typescript-eslint/no-unsafe-member-access
          country + "-" + city + "-" + region
        }
            \n${agent ?? ""}\n${decodeURIComponent(source ?? "")}\n
            https://api.whatsapp.com/send?phone=${intlPhone
              .replace("+", "")
              .trim()}&text=${encodeURIComponent(
              `Oi ${firstName}! Tudo bem?❤\n\nAqui é a Bárbara e faço parte da equipe do Lactoflow.🥰\n\nVi que você se interessou pelo curso Lactoflow.\n\nVocê está com alguma dificuldade com a sua amamentação?`
            )}
            `
      )}`
    );
  }
  sendLeadToTelegram(
    email,
    intlPhone.toString(),
    cta.toString(),
    countryCode.toString(),
    city.toString(),
    region.toString(),
    userAgent.os.name || "",
    source.toString()
  );
  const isCheckoutActive = true;
  if (isCheckoutActive) {
    return new Response(null, {
      status: 302,
      headers: {
        Location: `https://pay.hotmart.com/O84147403X?off=32k5pbhv&checkoutMode=10&sck=${source}&email=${email}&name=${name}&phonenumber=${phoneac}`,
      },
    });
  }

  return new Response(
    JSON.stringify({
      ...fields,
      firstName,
      lastName,
      fn,
      ln,
      em,
      ph,
      ct,
      st,
      country,
      client_user_agent: agent,
      client_ip_address: userIP,
      redirect: `https://pay.hotmart.com/O84147403X?off=32k5pbhv&checkoutMode=10&sck=${source}&email=${email}&name=${name}&phonenumber=${phoneac}`,
    }),
    {
      headers: {
        "content-type": "text/plain",
      },
    }
  );
}
---
